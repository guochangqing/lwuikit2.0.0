package six.lwuikit.app.act;import java.util.Timer;import java.util.TimerTask;import six.lwuikit.R;import six.lwuikit.lyrics.LineByLineView;import six.lwuikit.lyrics.LyricEntity;import six.lwuikit.lyrics.LyricFetchInterface;import six.lwuikit.lyrics.LyricFetcher;import six.lwuikit.lyrics.LyricParser;import six.lwuikit.lyrics.LyricRepository;import six.lwuikit.lyrics.OnLyricEventListener;import six.lwuikit.lyrics.OnLyricProgressListener;import six.lwuikit.lyrics.WordForWordView;import android.app.Activity;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup.LayoutParams;import android.widget.LinearLayout;public class LyricActivity extends Activity{	private LineByLineView lineview = null;	private WordForWordView wordview = null;	private Handler mHandler;	int index = 0;	String[] paths = {"/111.lrc","/2212.lrc"};	@Override	protected void onCreate(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onCreate(savedInstanceState);		setContentView(R.layout.act_lyric);				lineview = (LineByLineView)findViewById(R.id.lineview);		lineview.setOnLyricEventListener(new OnLyricEventListener() {						@Override			public void onUp(LineByLineView view) {				// TODO Auto-generated method stub				startTimer();				Log.e("aa", "onUp__onUp");			}						@Override			public void onDown(LineByLineView view) {				// TODO Auto-generated method stub				stopTimer();				Log.e("aa", "onDown__onDown");			}						@Override			public void onClick(LineByLineView view) {				// TODO Auto-generated method stub				Log.e("aa", "onClick__onClick");			}		});		lineview.setOnLyricProgressListener(new OnLyricProgressListener() {						@Override			public void onStopTracking(LineByLineView view) {				// TODO Auto-generated method stub				Log.e("aa", "onStopTracking");			}						@Override			public void onStartTracking(LineByLineView view) {				// TODO Auto-generated method stub				Log.e("aa", "onStartTracking");			}						@Override			public void onHighLightChanged(LineByLineView view, long curtime,					int highlightrow) {				// TODO Auto-generated method stub				Log.e("aa", "onHighLightChanged::"+highlightrow);			}		});		wordview = (WordForWordView)findViewById(R.id.wordview);		findViewById(R.id.button1).setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				lineview.setLayoutParams(new LinearLayout.LayoutParams(400,LayoutParams.MATCH_PARENT));				wordview.setNumRows(5);				wordview.setDirections("1,0,1,0,1");				wordview.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,640));			}		});		findViewById(R.id.button2).setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				lineview.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));				wordview.setNumRows(2);				wordview.setDirections("1,0");				wordview.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,240));			}		});		findViewById(R.id.button3).setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub//				stopTimer();				startTimer();			}		});		findViewById(R.id.button4).setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				lineview.setScrollMode(0);			}		});		findViewById(R.id.button5).setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				lineview.setScrollMode(1);			}		});		findViewById(R.id.button6).setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				lineview.setShadowable(false);			}		});		findViewById(R.id.button7).setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				lineview.setShadowable(true);			}		});		findViewById(R.id.button8).setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				dealLyric();			}		});		findViewById(R.id.button9).setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				lineview.setFontSize(lineview.getFontSize()+2);				wordview.setFontSize(wordview.getFontSize()+2);			}		});		findViewById(R.id.button10).setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				lineview.setFontSize(lineview.getFontSize()-2);				wordview.setFontSize(wordview.getFontSize()-2);			}		});		mHandler = new Handler();				dealLyric();//				//http://www.cnlyric.com/LrcDown/10186/208502.lrc//		fetch.asynFetchLyricByUri("http://www.cnlyric.com/LrcDown/3174/158723.lrc",base);			}	@Override	protected void onDestroy() {		// TODO Auto-generated method stub		stopTimer();		super.onDestroy();	}	private void dealLyric(){		mHandler.postDelayed(new Runnable(){			@Override			public void run() {				// TODO Auto-generated method stub				stopTimer();				LyricFetcher fetch = new LyricFetcher();				String sdDir = Environment.getExternalStorageDirectory().toString();				sdDir += paths[index++%paths.length];				if(!LyricRepository.getInstance().isContainsLyric(sdDir)){					String str = fetch.synFetchLyricByFilePath(sdDir);					new LyricParser().parseAndStack(sdDir, str);				}				LyricEntity entity = LyricRepository.getInstance().getLyricEntity(sdDir);				entity.setOffsetTime(30000);				lineview.setLyric(entity);				wordview.setLyric(entity);				wordview.selectIndex(0, 240000);				lineview.requestLayout();				lineview.postInvalidate();				wordview.postInvalidate();				startTimer();			}					}, 1000);			}	LyricFetchInterface base = new LyricFetchInterface(){		@Override		public void onFetchStart(String identifier) {			// TODO Auto-generated method stub			Log.e("aa", "onStart::"+identifier);		}		@Override		public void onFetchFail(String identifier) {			// TODO Auto-generated method stub			Log.e("aa", "onFail::"+identifier);		}		@Override		public void onFetchSuccess(String identifier, String result) {			// TODO Auto-generated method stub//			Log.e("aa", "onSuccess::"+result);			new LyricParser().parseAndStack(identifier, result);			lineview.setLyric(LyricRepository.getInstance().getLyricEntity(identifier));			wordview.setLyric(LyricRepository.getInstance().getLyricEntity(identifier));			wordview.selectIndex(0, 240000);			lineview.requestLayout();			lineview.postInvalidate();			wordview.postInvalidate();//			startTimer();		}			};	Timer mTimer = null;	boolean isTask = false;	private void startTimer() {		stopTimer();		isTask = true;		final long starttime = System.currentTimeMillis();		if (mTimer == null) {			TimerTask task = new TimerTask() {				@Override				public void run() {										long ctime = System.currentTimeMillis()-starttime;					lineview.setOffsetY(lineview.getOffsetY()							- lineview.speedLrc());					lineview.selectIndex(ctime);					wordview.selectIndex(ctime, 240000);					mHandler.post(new Runnable() {						@Override						public void run() {							// TODO Auto-generated method stub							lineview.rescroll();							wordview.invalidate();							lineview.invalidate();						}					});				}			};			mTimer = new Timer();			mTimer.schedule(task, 50, 20);		}	}		private void stopTimer() {		if (mTimer != null) {			isTask = false;			mTimer.cancel();			mTimer = null;		}	}	}