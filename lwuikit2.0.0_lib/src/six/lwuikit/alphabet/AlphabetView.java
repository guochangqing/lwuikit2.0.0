package six.lwuikit.alphabet;import six.lwuikit.saf.RE;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Paint.Align;import android.graphics.Paint.FontMetricsInt;import android.graphics.drawable.Drawable;import android.os.Handler;import android.os.Message;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.View;public class AlphabetView extends View{		private int LETTER_VIEW_DISPLAY_TIME = 3000;		private static final String ALPHABET[] = { "#", "A", "B", "C", "D", "E", "F",		"G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S",		"T", "U", "V", "W", "X", "Y", "Z"};		private String TAB[] = {"A", "H", "R", "Z"};		private int mAlphabetFontSize = 30;		private int mAlphabetFocusColor = Color.BLACK;		private int mAlphabetNormalColor = Color.GRAY;		private int mAlphabetTabColor = Color.WHITE;		private Drawable mAlphabetFocusDrawable;		private Paint mPaint;		private int averageHeight;		private int offset_y;		private String mCurrentLetter;		private String lastLetter;		private OnAlphabetListener mOnAlphabetListener;		public AlphabetView(Context context) {		this(context, null ,0);	}		public AlphabetView(Context context, AttributeSet attrs) {		this(context, attrs ,0);	}		public AlphabetView(Context context, AttributeSet attrs, int defStyleAttr) {		super(context, attrs, defStyleAttr);		// TODO Auto-generated constructor stub		init();		TypedArray a = context.obtainStyledAttributes(attrs, RE.styleable_AlphabetView);		if(null != a){			int index = RE.get(RE.ATTR_FOCUSDRAWABLE);			if(index >= 0){				setAlphabetFocusDrawable(a.getDrawable(index));			}			index = RE.get(RE.ATTR_FOCUSTEXTCOLOR);			if(index >= 0){				setAlphabetFocusColor(a.getColor(index, Color.BLACK));			}			index = RE.get(RE.ATTR_NORMALTEXTCOLOR);			if(index >= 0){				setAlphabetNormalColor(a.getColor(index, Color.GRAY));			}			index = RE.get(RE.ATTR_TABTEXTCOLOR);			if(index >= 0){				setAlphabetTabColor(a.getColor(index, Color.WHITE));			}			index = RE.get(RE.ATTR_AFONTSIZE);			if(index >= 0){				setAlphabetFontSize((int)a.getDimension(index, 30));			}			a.recycle();		}	}	private void init() {		mPaint = new Paint();		mPaint.setAntiAlias(true);		mPaint.setTextAlign(Align.CENTER);		setAlphabetFontSize(30);	}			@Override	protected void onLayout(boolean changed, int left, int top, int right,			int bottom) {		// TODO Auto-generated method stub		super.onLayout(changed, left, top, right, bottom);		averageHeight = getHeight()/ALPHABET.length;	}	@Override	public boolean onTouchEvent(MotionEvent event) {		// TODO Auto-generated method stub		int action = event.getAction();		switch (action) {		case MotionEvent.ACTION_DOWN:			if(mToastHandler.hasMessages(0)){				mToastHandler.removeMessages(0);			}			mCurrentLetter = computeCurrentLetter(event);			if(null != mCurrentLetter && !mCurrentLetter.equals(lastLetter)){				lastLetter = mCurrentLetter;				if(null != mOnAlphabetListener){					mOnAlphabetListener.onLetter(this,mCurrentLetter);				}			}			break;		case MotionEvent.ACTION_MOVE:			mCurrentLetter = computeCurrentLetter(event);			if(null != mCurrentLetter && !mCurrentLetter.equals(lastLetter)){				lastLetter = mCurrentLetter;				if(null != mOnAlphabetListener){					mOnAlphabetListener.onLetter(this,mCurrentLetter);				}			}			break;		case MotionEvent.ACTION_UP:		case MotionEvent.ACTION_CANCEL:			mToastHandler.sendEmptyMessageDelayed(0, LETTER_VIEW_DISPLAY_TIME);			break;		}		invalidate();		return true;	}	private boolean isTabLetter(String le) {		if(null == TAB) {			return false;		}		for(int i=0;i<TAB.length;i++) {			if(TAB[i].equals(le)) {				return true;			}		}		return false;	}	private Handler mToastHandler = new Handler() {		@Override		public void handleMessage(Message msg) {			mCurrentLetter = null;			lastLetter = null;			invalidate();			if(null != mOnAlphabetListener){				mOnAlphabetListener.onCancel(AlphabetView.this);			}		}	};	public void reset() {		mCurrentLetter = null;		lastLetter = null;		if(null != mToastHandler && mToastHandler.hasMessages(0)) {			mToastHandler.removeMessages(0);		}		postInvalidate();	}	@Override	protected void onDraw(Canvas canvas) {		// TODO Auto-generated method stub		super.onDraw(canvas);		updateOffsetY();		for(int i = 0; i < ALPHABET.length; i++) {			if(null != mCurrentLetter && mCurrentLetter.equals(ALPHABET[i])){				if (null != mAlphabetFocusDrawable && null != mCurrentLetter) {					int width = (int)(mAlphabetFontSize * 1.4);					mAlphabetFocusDrawable.setBounds((getWidth() - width) / 2, averageHeight * i							+ (averageHeight - width) / 2, (getWidth() - width) / 2							+ width, averageHeight * i + (averageHeight - width) / 2							+ width);					mAlphabetFocusDrawable.draw(canvas);					mPaint.setColor(mAlphabetFocusColor);				}			}else{				if(isTabLetter(ALPHABET[i])) {					mPaint.setColor(mAlphabetTabColor);				}else{					mPaint.setColor(mAlphabetNormalColor);				}			}			canvas.drawText(ALPHABET[i], getWidth()/2,averageHeight*i+offset_y, mPaint);		}	}		public void setTab(String[] tab) {		TAB = tab;	}		public void setCurrentLetter(String letter) {		if(null == letter) {			return;		}		for (int i = 0; i < ALPHABET.length; i++) {			if(ALPHABET[i].equals(letter)) {				mCurrentLetter = ALPHABET[i];				break;			}		}		if(null != mCurrentLetter && !mCurrentLetter.equals(lastLetter)){			lastLetter = mCurrentLetter;			if(mToastHandler.hasMessages(0)){				mToastHandler.removeMessages(0);			}			postInvalidate();			if(null != mOnAlphabetListener){				mOnAlphabetListener.onLetter(this,mCurrentLetter);			}			mToastHandler.sendEmptyMessageDelayed(0, LETTER_VIEW_DISPLAY_TIME);		}	}	private String computeCurrentLetter(MotionEvent event) {		float y = event.getY();		for (int i = 0; i < ALPHABET.length; i++) {			if (y >= averageHeight *i && y < averageHeight *(i+1)) {				return ALPHABET[i];			}		}		return null;	}	public int getAlphabetFontSize() {		return mAlphabetFontSize;	}	public void setAlphabetFontSize(int mAlphabetFontSize) {		this.mAlphabetFontSize = mAlphabetFontSize;		mPaint.setTextSize(mAlphabetFontSize);		postInvalidate();	}	private void updateOffsetY() {		FontMetricsInt fontMetrics = mPaint.getFontMetricsInt();		offset_y = (averageHeight - fontMetrics.bottom + fontMetrics.top) / 2 - fontMetrics.top; 	}	public int getAlphabetFocusColor() {		return mAlphabetFocusColor;	}	public void setAlphabetFocusColor(int mAlphabetFocusColor) {		this.mAlphabetFocusColor = mAlphabetFocusColor;		postInvalidate();	}	public int getAlphabetNormalColor() {		return mAlphabetNormalColor;	}	public void setAlphabetNormalColor(int mAlphabetNormalColor) {		this.mAlphabetNormalColor = mAlphabetNormalColor;		postInvalidate();	}	public int getAlphabetTabColor() {		return mAlphabetTabColor;	}	public void setAlphabetTabColor(int mAlphabetTabColor) {		this.mAlphabetTabColor = mAlphabetTabColor;		postInvalidate();	}	public Drawable getAlphabetFocusDrawable() {		return mAlphabetFocusDrawable;	}	public void setAlphabetFocusDrawable(Drawable mAlphabetFocusDrawable) {		this.mAlphabetFocusDrawable = mAlphabetFocusDrawable;	}		public OnAlphabetListener getOnAlphabetListener() {		return mOnAlphabetListener;	}	public void setOnAlphabetListener(OnAlphabetListener mOnAlphabetListener) {		this.mOnAlphabetListener = mOnAlphabetListener;	}	public interface OnAlphabetListener{		public void onLetter(AlphabetView view,String letter);		public void onCancel(AlphabetView view);	}}